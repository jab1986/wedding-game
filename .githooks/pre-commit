#!/bin/bash

# Wedding Game Pre-commit Hook
# Runs quality assurance checks before commits

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[PRE-COMMIT]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get project root
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
cd "$PROJECT_ROOT"

print_status "Running pre-commit quality assurance checks..."
echo ""

# Check if QA tools exist
if [ ! -x "./scripts/dev-qa-tools.sh" ]; then
    print_error "QA tools not found at ./scripts/dev-qa-tools.sh"
    print_error "Please ensure development tools are properly set up"
    exit 1
fi

# Run GDScript syntax validation
print_status "Validating GDScript syntax..."
if ! ./scripts/dev-qa-tools.sh gdscript; then
    print_error "GDScript syntax validation failed"
    print_error "Please fix syntax errors before committing"
    exit 1
fi

# Run project structure validation
print_status "Validating project structure..."
if ! ./scripts/dev-qa-tools.sh structure; then
    print_error "Project structure validation failed"
    print_error "Please fix structural issues before committing"
    exit 1
fi

# Check for files that shouldn't be committed
print_status "Checking for problematic files..."

# Check for large files
LARGE_FILES=$(git diff --cached --name-only --diff-filter=A | xargs -I {} find {} -size +10M 2>/dev/null || true)
if [ -n "$LARGE_FILES" ]; then
    print_error "Large files (>10MB) detected in commit:"
    echo "$LARGE_FILES"
    print_error "Please use Git LFS for large files or remove them from commit"
    exit 1
fi

# Check for temporary files
TEMP_FILES=$(git diff --cached --name-only | grep -E '\.(tmp|temp|log|cache)$|~$|\.swp$' || true)
if [ -n "$TEMP_FILES" ]; then
    print_error "Temporary files detected in commit:"
    echo "$TEMP_FILES"
    print_error "Please remove temporary files before committing"
    exit 1
fi

# Check for sensitive files
SENSITIVE_FILES=$(git diff --cached --name-only | grep -E '\.key$|\.pem$|\.p12$|password|secret|credential' || true)
if [ -n "$SENSITIVE_FILES" ]; then
    print_error "Potentially sensitive files detected in commit:"
    echo "$SENSITIVE_FILES"
    print_error "Please remove sensitive files before committing"
    exit 1
fi

# Check for incomplete dialogue files
DIALOGUE_FILES=$(git diff --cached --name-only | grep '\.dialogue$' || true)
if [ -n "$DIALOGUE_FILES" ]; then
    print_status "Validating dialogue files..."
    for file in $DIALOGUE_FILES; do
        if [ -f "$file" ] && [ ! -s "$file" ]; then
            print_warning "Empty dialogue file detected: $file"
        fi
    done
fi

# Check for GDScript files with syntax issues in the commit
GDSCRIPT_FILES=$(git diff --cached --name-only | grep '\.gd$' || true)
if [ -n "$GDSCRIPT_FILES" ]; then
    print_status "Checking committed GDScript files..."
    for file in $GDSCRIPT_FILES; do
        if [ -f "$file" ]; then
            # Check for common issues
            if grep -q "print(" "$file" && ! grep -q "# Debug:" "$file"; then
                print_warning "Debug print() statements found in $file (consider removing or marking as debug)"
            fi
            
            # Check for missing docstrings in new functions
            if git diff --cached "$file" | grep -q "^+func " && ! git diff --cached "$file" | grep -q "^+##"; then
                print_warning "New functions without docstrings in $file"
            fi
        fi
    done
fi

# Run a quick code quality check on staged files
print_status "Running code quality check on staged files..."
if ! ./scripts/dev-qa-tools.sh quality; then
    print_warning "Code quality issues detected (not blocking commit)"
fi

# Success message
print_success "All pre-commit checks passed!"
print_status "Proceeding with commit..."
echo ""

exit 0