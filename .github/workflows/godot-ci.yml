name: Godot CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GODOT_VERSION: 4.4
  EXPORT_NAME: wedding-game
  PROJECT_PATH: "."

jobs:
  # Quality Assurance Job
  quality-assurance:
    name: Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v2
        with:
          version: ${{ env.GODOT_VERSION }}
          include-templates: true

      - name: Make scripts executable
        run: |
          chmod +x scripts/dev-qa-tools.sh
          chmod +x scripts/install-git-hooks.sh

      - name: Run quality assurance checks
        run: |
          ./scripts/dev-qa-tools.sh all

      - name: Verify project structure
        run: |
          ./scripts/dev-qa-tools.sh structure

      - name: Check GDScript syntax
        run: |
          ./scripts/dev-qa-tools.sh gdscript

      - name: Validate dialogue files
        run: |
          ./scripts/dev-qa-tools.sh dialogue

      - name: Check code quality
        run: |
          ./scripts/dev-qa-tools.sh quality

      - name: Generate QA report
        run: |
          ./scripts/dev-qa-tools.sh report

      - name: Upload QA report
        uses: actions/upload-artifact@v4
        with:
          name: qa-report
          path: reports/
          retention-days: 30

  # Import and Build Job
  import-and-build:
    name: Import and Build
    runs-on: ubuntu-latest
    needs: quality-assurance
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v2
        with:
          version: ${{ env.GODOT_VERSION }}
          include-templates: true

      - name: Verify project configuration
        run: |
          echo "Verifying project.godot configuration..."
          cat project.godot

      - name: Import project assets
        run: |
          echo "Importing project assets..."
          godot --headless --import --quit-after 30 || true
          echo "Asset import completed"

      - name: Build project
        run: |
          echo "Building project..."
          godot --headless --quit-after 10 || true
          echo "Build completed"

      - name: Verify build
        run: |
          echo "Verifying build artifacts..."
          ls -la .godot/
          echo "Build verification completed"

  # Export Job for Different Platforms
  export-game:
    name: Export Game
    runs-on: ubuntu-latest
    needs: import-and-build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    strategy:
      matrix:
        platform: [linux, windows, web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v2
        with:
          version: ${{ env.GODOT_VERSION }}
          include-templates: true

      - name: Create export directory
        run: |
          mkdir -p exports/${{ matrix.platform }}

      - name: Import project assets
        run: |
          godot --headless --import --quit-after 30 || true

      - name: Export for Linux
        if: matrix.platform == 'linux'
        run: |
          godot --headless --export-release "Linux/X11" exports/linux/${{ env.EXPORT_NAME }}.x86_64 || true
          ls -la exports/linux/

      - name: Export for Windows
        if: matrix.platform == 'windows'
        run: |
          godot --headless --export-release "Windows Desktop" exports/windows/${{ env.EXPORT_NAME }}.exe || true
          ls -la exports/windows/

      - name: Export for Web
        if: matrix.platform == 'web'
        run: |
          godot --headless --export-release "Web" exports/web/index.html || true
          ls -la exports/web/

      - name: Upload export artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXPORT_NAME }}-${{ matrix.platform }}
          path: exports/${{ matrix.platform }}/
          retention-days: 30

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-assurance
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          # Check for sensitive files
          echo "Scanning for sensitive files..."
          find . -type f -name "*.key" -o -name "*.pem" -o -name "*.p12" | head -10 || true
          
          # Check for hardcoded secrets
          echo "Scanning for potential secrets..."
          grep -r -i "password\|secret\|token\|key" --include="*.gd" --include="*.cs" . | head -20 || true
          
          # Check for large files
          echo "Scanning for large files..."
          find . -type f -size +10M | head -10 || true

      - name: Check dependencies
        run: |
          echo "Checking project dependencies..."
          # For Godot projects, check addon dependencies
          if [ -f "project.godot" ]; then
            echo "Godot project detected"
            grep -A 20 "enabled=PackedStringArray" project.godot || true
          fi

  # Release Job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [quality-assurance, import-and-build, export-game, security-scan]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: List artifacts
        run: |
          echo "Available artifacts:"
          ls -la release-artifacts/

      - name: Create release archives
        run: |
          cd release-artifacts
          
          # Create archives for each platform
          if [ -d "${{ env.EXPORT_NAME }}-linux" ]; then
            tar -czf ${{ env.EXPORT_NAME }}-linux.tar.gz ${{ env.EXPORT_NAME }}-linux/
          fi
          
          if [ -d "${{ env.EXPORT_NAME }}-windows" ]; then
            zip -r ${{ env.EXPORT_NAME }}-windows.zip ${{ env.EXPORT_NAME }}-windows/
          fi
          
          if [ -d "${{ env.EXPORT_NAME }}-web" ]; then
            zip -r ${{ env.EXPORT_NAME }}-web.zip ${{ env.EXPORT_NAME }}-web/
          fi
          
          ls -la *.tar.gz *.zip || true

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-artifacts/*.tar.gz
            release-artifacts/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true

  # Notification Job
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [quality-assurance, import-and-build, export-game, security-scan]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "Quality Assurance: ${{ needs.quality-assurance.result }}"
          echo "Import and Build: ${{ needs.import-and-build.result }}"
          echo "Export Game: ${{ needs.export-game.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          
          if [ "${{ needs.quality-assurance.result }}" = "failure" ]; then
            echo "❌ Quality assurance checks failed"
            exit 1
          elif [ "${{ needs.import-and-build.result }}" = "failure" ]; then
            echo "❌ Build failed"
            exit 1
          elif [ "${{ needs.security-scan.result }}" = "failure" ]; then
            echo "❌ Security scan failed"
            exit 1
          else
            echo "✅ All checks passed"
          fi